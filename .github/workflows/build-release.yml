name: Build Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 🎉 Kelivo ${{ github.ref_name }} 发布

            ### ✨ 新功能
            - **改进的加载动画效果**
              - 支持多种动画风格（shimmer、pulse、typewriter、modern）
              - 现代化的波浪加载效果
              - 文字与动画同步显示

            ### 🔧 修复
            - **修复思考内容的Markdown渲染**
              - 现在可以正确显示粗体、斜体、代码块等格式
            - **修复网页版侧边栏底部设置按钮不显示的问题**
            - **Windows平台兼容性大幅改进**
              - 修复触觉反馈在Windows上的调用错误
              - 修复PDF读取、图片选择器等插件兼容性
              - 所有平台特定功能现在都会优雅降级

            ### 🚀 技术改进
            - 创建了AnimatedLoadingText和ModernLoadingIndicator组件
            - 创建PlatformUtils工具类统一处理跨平台兼容性
            - 升级了项目依赖包
            - 添加了GitHub Actions自动构建配置

            ### 📦 下载
            构建产物将在下方自动附加。
          draft: false
          prerelease: false
  build-android:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          
      - name: Get dependencies
        run: |
          flutter pub get
          
      - name: Build APK (unsigned if no keystore)
        run: |
          # Use verbose logs to surface kernel_snapshot errors
          flutter build apk --release --split-per-abi -v
          
      - name: Build App Bundle
        run: |
          # Use verbose logs to surface kernel_snapshot errors
          flutter build appbundle --release -v
          
      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apks
          path: |
            build/app/outputs/flutter-apk/*.apk
            
      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-release-bundle
          path: build/app/outputs/bundle/release/*.aab
          
      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/bundle/release/*.aab

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Get dependencies
        run: |
          flutter pub get

      - name: Configure Windows Desktop
        run: |
          flutter config --enable-windows-desktop

      - name: Build Windows with flutter_tts workaround
        shell: pwsh
        run: |
          # Start the build process, it will fail but generate the plugin files
          Write-Host "Starting initial build to generate plugin files..."
          flutter build windows --release 2>&1 | Out-Null

          Write-Host "Applying flutter_tts workaround..."

          # Robustly stub flutter_tts Windows plugin into a minimal valid plugin that compiles and links
          $pluginCMake = "windows/flutter/ephemeral/.plugin_symlinks/flutter_tts/windows/CMakeLists.txt"
          $pluginDir = Split-Path $pluginCMake -Parent
          if (Test-Path $pluginCMake) {
            Write-Host "Stubbing $pluginCMake to a minimal valid plugin"
            # Write minimal CMakeLists that builds a DLL and exports the registrar symbol
            $cmakeLines = @(
              'cmake_minimum_required(VERSION 3.14)',
              'set(PLUGIN_NAME "flutter_tts_plugin")',
              'project(${PLUGIN_NAME} LANGUAGES CXX)',
              'add_library(${PLUGIN_NAME} SHARED',
              '  "flutter_tts_plugin.cpp"',
              ')',
              'apply_standard_settings(${PLUGIN_NAME})',
              'target_compile_features(${PLUGIN_NAME} PUBLIC cxx_std_17)',
              'target_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)',
              'target_include_directories(${PLUGIN_NAME} INTERFACE',
              '  "${CMAKE_CURRENT_SOURCE_DIR}/include"',
              ')',
              'target_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)',
              'set(flutter_tts_bundled_libraries "" PARENT_SCOPE)'
            )
            $cmakeLines | Set-Content $pluginCMake -Encoding UTF8

            # Ensure include directory exists and write header
            $includeDir = Join-Path $pluginDir 'include/flutter_tts'
            New-Item -ItemType Directory -Force $includeDir | Out-Null
            $headerPath = Join-Path $includeDir 'flutter_tts_plugin.h'
            $headerLines = @(
              '#ifndef FLUTTER_PLUGIN_FLUTTER_TTS_PLUGIN_H_',
              '#define FLUTTER_PLUGIN_FLUTTER_TTS_PLUGIN_H_',
              '#include <flutter/plugin_registrar_windows.h>',
              '#if defined(FLUTTER_PLUGIN_IMPL)',
              '#define FLUTTER_PLUGIN_EXPORT __declspec(dllexport)',
              '#else',
              '#define FLUTTER_PLUGIN_EXPORT __declspec(dllimport)',
              '#endif',
              'extern "C" {',
              'FLUTTER_PLUGIN_EXPORT void FlutterTtsPluginRegisterWithRegistrar(',
              '    FlutterDesktopPluginRegistrarRef registrar);',
              '}',
              '#endif  // FLUTTER_PLUGIN_FLUTTER_TTS_PLUGIN_H_'
            )
            $headerLines | Set-Content $headerPath -Encoding UTF8

            # Write minimal implementation
            $implPath = Join-Path $pluginDir 'flutter_tts_plugin.cpp'
            $implLines = @(
              '#include "include/flutter_tts/flutter_tts_plugin.h"',
              'extern "C" void FlutterTtsPluginRegisterWithRegistrar(FlutterDesktopPluginRegistrarRef registrar) {}'
            )
            $implLines | Set-Content $implPath -Encoding UTF8
          }

          Write-Host "Rebuilding with workaround applied..."
          flutter build windows --release
          
      - name: Package Windows Build
        shell: pwsh
        run: |
          Write-Host "Locating Windows build output folder..."
          $candidates = @(
            "build/windows/x64/runner/Release",
            "build/windows/runner/Release",
            "build/windows/x64/RelWithDebInfo",
            "build/windows/runner/RelWithDebInfo"
          )
          $bundle = $null
          foreach ($c in $candidates) {
            if (Test-Path $c) {
              if (Test-Path (Join-Path $c 'flutter_windows.dll') -or Test-Path (Join-Path $c 'data')) {
                $bundle = $c; break
              }
            }
          }
          if (-not $bundle) {
            $dll = Get-ChildItem -Recurse -ErrorAction SilentlyContinue -Filter 'flutter_windows.dll' | Select-Object -First 1
            if ($dll) { $bundle = Split-Path $dll.FullName -Parent }
          }
          if (-not $bundle) { Get-ChildItem -Recurse build/windows | Select-Object -First 200 | % { $_.FullName }; throw "Failed to locate Windows bundle folder" }
          Write-Host "Bundling from: $bundle"
          if (-not (Test-Path (Join-Path $bundle 'data'))) { Write-Warning "'data' directory missing; the zip may be incomplete." }
          if (-not (Test-Path (Join-Path $bundle 'flutter_windows.dll'))) { Write-Warning "'flutter_windows.dll' missing; the zip may be incomplete." }
          Compress-Archive -Path (Join-Path $bundle '*') -DestinationPath kelivo-windows-x64.zip -Force
          $size = (Get-Item kelivo-windows-x64.zip).Length / 1MB
          Write-Host ("Created kelivo-windows-x64.zip ({0:N1} MB)" -f $size)
          
      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: kelivo-windows-x64.zip
          
      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: kelivo-windows-x64.zip
