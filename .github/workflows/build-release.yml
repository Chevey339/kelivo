name: Build Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 🎉 Kelivo ${{ github.ref_name }} 发布

            ### ✨ 新功能
            - **改进的加载动画效果**
              - 支持多种动画风格（shimmer、pulse、typewriter、modern）
              - 现代化的波浪加载效果
              - 文字与动画同步显示

            ### 🔧 修复
            - **修复思考内容的Markdown渲染**
              - 现在可以正确显示粗体、斜体、代码块等格式
            - **修复网页版侧边栏底部设置按钮不显示的问题**
            - **Windows平台兼容性大幅改进**
              - 修复触觉反馈在Windows上的调用错误
              - 修复PDF读取、图片选择器等插件兼容性
              - 所有平台特定功能现在都会优雅降级

            ### 🚀 技术改进
            - 创建了AnimatedLoadingText和ModernLoadingIndicator组件
            - 创建PlatformUtils工具类统一处理跨平台兼容性
            - 升级了项目依赖包
            - 添加了GitHub Actions自动构建配置

            ### 📦 下载
            构建产物将在下方自动附加。
          draft: false
          prerelease: false
  build-android:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          
      - name: Get dependencies
        run: |
          flutter pub get
          
      - name: Build APK (unsigned if no keystore)
        run: |
          # Use verbose logs to surface kernel_snapshot errors
          flutter build apk --release --split-per-abi -v
          
      - name: Build App Bundle
        run: |
          # Use verbose logs to surface kernel_snapshot errors
          flutter build appbundle --release -v
          
      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apks
          path: |
            build/app/outputs/flutter-apk/*.apk
            
      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-release-bundle
          path: build/app/outputs/bundle/release/*.aab
          
      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/bundle/release/*.aab

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Get dependencies
        run: |
          flutter pub get

      - name: Configure Windows Desktop
        run: |
          flutter config --enable-windows-desktop

      - name: Build Windows with flutter_tts workaround
        shell: pwsh
        run: |
          # Start the build process, it will fail but generate the plugin files
          Write-Host "Starting initial build to generate plugin files..."
          flutter build windows --release 2>&1 | Out-Null

          Write-Host "Applying flutter_tts workaround..."

          # Robustly stub flutter_tts Windows CMake to a no-op SHARED target (so $<TARGET_FILE:..> works)
          $pluginCMake = "windows/flutter/ephemeral/.plugin_symlinks/flutter_tts/windows/CMakeLists.txt"
          $pluginDir = Split-Path $pluginCMake -Parent
          if (Test-Path $pluginCMake) {
            Write-Host "Stubbing $pluginCMake to a minimal SHARED library"
            # Write minimal CMakeLists that builds an empty DLL
            $cmakeLines = @(
              'cmake_minimum_required(VERSION 3.14)',
              'set(PLUGIN_NAME "flutter_tts_plugin")',
              'project(${PLUGIN_NAME} LANGUAGES CXX)',
              'set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)',
              'add_library(${PLUGIN_NAME} SHARED "noop.cpp")',
              'target_compile_features(${PLUGIN_NAME} PUBLIC cxx_std_17)',
              'set(flutter_tts_bundled_libraries "" PARENT_SCOPE)'
            )
            $cmakeLines | Set-Content $pluginCMake -Encoding UTF8
            # Write minimal C++ source to ensure the DLL is produced
            $noopCpp = Join-Path $pluginDir 'noop.cpp'
            $cppLines = @(
              '#include <windows.h>',
              'extern "C" __declspec(dllexport) void kelivo_tts_noop() {}'
            )
            $cppLines | Set-Content $noopCpp -Encoding UTF8
          }

          # Remove from generated_plugins.cmake
          $genPlugins = "windows/flutter/generated_plugins.cmake"
          if (Test-Path $genPlugins) {
            Write-Host "Patching $genPlugins"
            (Get-Content $genPlugins) | Where-Object {$_ -notmatch 'flutter_tts'} | Set-Content $genPlugins -Encoding UTF8
          }

          # Remove from generated_plugin_registrant.cc (both header include and registrar call)
          $genRegistrant = "windows/flutter/generated_plugin_registrant.cc"
          if (Test-Path $genRegistrant) {
            Write-Host "Patching $genRegistrant"
            (Get-Content $genRegistrant) |
              Where-Object {$_ -notmatch '(flutter_tts|FlutterTts)'} |
              Set-Content $genRegistrant -Encoding UTF8
          }

          # Remove from generated_plugin_registrant.h
          $genHeader = "windows/flutter/generated_plugin_registrant.h"
          if (Test-Path $genHeader) {
            Write-Host "Patching $genHeader"
            (Get-Content $genHeader) | Where-Object {$_ -notmatch 'flutter_tts'} | Set-Content $genHeader -Encoding UTF8
          }

          Write-Host "Rebuilding with workaround applied (cmake build to avoid regenerating registrant)..."
          cmake --build build/windows --config Release
          
      - name: Create Windows Installer
        run: |
          # Create a simple ZIP archive as installer
          Compress-Archive -Path build\windows\x64\runner\Release\* -DestinationPath kelivo-windows-x64.zip
          
      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: kelivo-windows-x64.zip
          
      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: kelivo-windows-x64.zip
