name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true

  build-android:
    name: Build Android
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Install dependencies
        run: flutter pub get

      - name: Generate required files
        run: |
          echo "Generating Hive adapters and other generated files..."
          flutter pub run build_runner build --delete-conflicting-outputs || echo "Build runner completed with warnings"

      - name: Clean old signing files
        run: |
          echo "Cleaning old signing files..."
          rm -f android/key.properties
          rm -f android/upload-keystore.jks
          rm -f android/app/upload-keystore.jks
          rm -f android/app/key.properties
          echo "Cleanup complete"

      - name: Setup Android signing
        continue-on-error: true
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        run: |
          if [ -z "$KEYSTORE_BASE64" ]; then
            echo "No keystore configured, will build unsigned APK"
            exit 0
          fi

          echo "Setting up keystore..."
          echo "$KEYSTORE_BASE64" | base64 -d > android/upload-keystore.jks

          echo "Creating key.properties..."
          cat > android/key.properties << EOF
          storePassword=$KEYSTORE_PASSWORD
          keyPassword=$KEY_PASSWORD
          keyAlias=$KEY_ALIAS
          storeFile=upload-keystore.jks
          EOF

          echo "Keystore setup complete!"
          echo "Keystore file location:"
          ls -lh android/upload-keystore.jks
          echo ""
          echo "key.properties content:"
          cat android/key.properties
          echo ""
          echo "Current directory structure:"
          ls -la android/ | head -20

      - name: Build APK
        run: |
          echo "Building APK..."
          if [ -f "android/key.properties" ]; then
            echo "Building SIGNED APK..."
          else
            echo "Building UNSIGNED APK (no keystore found)..."
          fi
          flutter build apk --release --split-per-abi --no-tree-shake-icons
        continue-on-error: false

      - name: Build App Bundle
        run: |
          echo "Building App Bundle..."
          if [ -f "android/key.properties" ]; then
            echo "Building SIGNED App Bundle..."
          else
            echo "Building UNSIGNED App Bundle (no keystore found)..."
          fi
          flutter build appbundle --release --no-tree-shake-icons
        continue-on-error: false

      - name: Rename APK files
        run: |
          cd build/app/outputs/flutter-apk
          for file in app-*-release.apk; do
            if [ -f "$file" ]; then
              newname=$(echo "$file" | sed 's/app-/kelivo-/')
              mv "$file" "$newname"
              echo "Renamed: $file -> $newname"
            fi
          done
          ls -lh

      - name: Rename AAB file
        run: |
          cd build/app/outputs/bundle/release
          if [ -f "app-release.aab" ]; then
            mv app-release.aab kelivo-release.aab
            echo "Renamed: app-release.aab -> kelivo-release.aab"
          fi
          ls -lh

      - name: Upload APKs to Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/app/outputs/flutter-apk/kelivo-*.apk
            build/app/outputs/bundle/release/kelivo-release.aab

  build-windows:
    name: Build Windows
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Enable Windows Desktop
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Generate required files
        shell: pwsh
        run: |
          Write-Host "Generating Hive adapters and other generated files..."
          flutter pub run build_runner build --delete-conflicting-outputs
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Build runner completed with warnings, continuing..."
          }

      - name: Disable flutter_tts for Windows
        shell: pwsh
        run: |
          Write-Host "Disabling flutter_tts plugin for Windows build..."
          $pubspecPath = "pubspec.yaml"
          $content = Get-Content $pubspecPath -Raw

          # Comment out flutter_tts dependency
          $content = $content -replace '(\s+flutter_tts:\s+\^[\d\.]+)', '  # $1  # Disabled for Windows build'

          Set-Content $pubspecPath $content
          Write-Host "Updated pubspec.yaml"

          # Run pub get again
          flutter pub get

      - name: Build Windows app
        run: flutter build windows --release --no-tree-shake-icons

      - name: Create portable package
        shell: pwsh
        run: |
          Write-Host "Creating Windows portable package..."
          
          # Find the build output directory
          $buildPath = "build\windows\x64\runner\Release"
          
          if (-not (Test-Path $buildPath)) {
            Write-Host "ERROR: Build path not found: $buildPath"
            Write-Host "Searching for .exe files..."
            $exeFiles = Get-ChildItem -Path "build\windows" -Recurse -Filter "*.exe" -ErrorAction SilentlyContinue
            if ($exeFiles) {
              foreach ($exe in $exeFiles) {
                Write-Host "Found: $($exe.FullName)"
                $buildPath = Split-Path $exe.FullName -Parent
                break
              }
            } else {
              throw "No executable files found!"
            }
          }
          
          Write-Host "Build path: $buildPath"
          Write-Host "Contents:"
          Get-ChildItem -Path $buildPath | ForEach-Object {
            Write-Host "  $($_.Name) ($($_.Length) bytes)"
          }
          
          # Create output directory
          $outputDir = "kelivo-windows-x64"
          New-Item -ItemType Directory -Force -Path $outputDir | Out-Null
          
          # Copy all files
          Write-Host "`nCopying files to $outputDir..."
          Copy-Item -Path "$buildPath\*" -Destination $outputDir -Recurse -Force
          
          # Verify exe exists
          $exeFile = Get-ChildItem -Path $outputDir -Filter "*.exe" | Select-Object -First 1
          if (-not $exeFile) {
            throw "ERROR: No executable file found in output directory!"
          }
          Write-Host "Executable found: $($exeFile.Name)"
          
          # Create zip archive
          Write-Host "`nCreating zip archive..."
          Compress-Archive -Path $outputDir -DestinationPath "kelivo-windows-x64.zip" -Force
          
          if (-not (Test-Path "kelivo-windows-x64.zip")) {
            throw "ERROR: Failed to create zip file!"
          }
          
          $zipSize = (Get-Item "kelivo-windows-x64.zip").Length / 1MB
          Write-Host "âœ“ Created kelivo-windows-x64.zip (${zipSize:N2} MB)"

      - name: Upload Windows build to Release
        uses: softprops/action-gh-release@v2
        with:
          files: kelivo-windows-x64.zip
