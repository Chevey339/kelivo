name: Build Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 🎉 Kelivo ${{ github.ref_name }} 发布

            ### ✨ 新功能 (v1.1.0)
            - **Token 使用详情显示**
              - 显示输入（↓）和输出（↑）token 数量
              - 支持显示思考 token（💭）和缓存 token（♻）
              - 鼠标悬停显示详细的 token 使用信息
              - 刷新页面后保持详细显示格式

            ### 🔧 修复 (v1.1.0)
            - **修复 Token 显示问题**
              - 修复刷新页面后 token 显示变回总数的问题
              - 修复鼠标悬停提示不显示的问题
              - 使用 MouseRegion + OverlayEntry 实现更可靠的悬停提示
            - **修复 Hive 数据持久化问题**
              - 修复 tokenUsageJson 字段未正确保存到数据库的问题
            - **修复代码语法错误**
              - 修复 ios_switch.dart 中的十六进制颜色值格式错误

            ### 🚀 技术改进 (v1.1.0)
            - 配置 Android 应用签名
            - 改进 GitHub Actions 构建流程
            - 添加自定义悬停提示组件 _TokenUsageDisplay
            - 优化 token 使用信息的存储和显示逻辑

            ### 📦 下载
            构建产物将在下方自动附加。
          draft: false
          prerelease: false
  build-android:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get dependencies
        run: |
          flutter pub get

      - name: Decode and setup keystore
        run: |
          # Save base64 to temp file and decode
          echo "${{ secrets.KEYSTORE_BASE64 }}" > /tmp/keystore.b64
          base64 -d /tmp/keystore.b64 > android/app/upload-keystore.jks

          if [ ! -f android/app/upload-keystore.jks ] || [ ! -s android/app/upload-keystore.jks ]; then
            echo "ERROR: Keystore file was not created or is empty"
            echo "Base64 content (first 100 chars):"
            head -c 100 /tmp/keystore.b64
            exit 1
          fi

          ls -lh android/app/upload-keystore.jks
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=app/upload-keystore.jks" >> android/key.properties

      - name: Build APK (signed)
        run: |
          # Use verbose logs to surface kernel_snapshot errors
          flutter build apk --release --split-per-abi -v

      - name: Build App Bundle (signed)
        run: |
          # Use verbose logs to surface kernel_snapshot errors
          flutter build appbundle --release -v
          
      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apks
          path: |
            build/app/outputs/flutter-apk/*.apk
            
      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-release-bundle
          path: build/app/outputs/bundle/release/*.aab
          
      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/bundle/release/*.aab

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Get dependencies
        run: |
          flutter pub get

      - name: Configure Windows Desktop
        run: |
          flutter config --enable-windows-desktop

      - name: Build Windows with flutter_tts workaround
        shell: pwsh
        run: |
          # Start the build process, it will fail but generate the plugin files
          Write-Host "Starting initial build to generate plugin files..."
          flutter build windows --release 2>&1 | Out-Null

          Write-Host "Applying flutter_tts workaround..."

          # Robustly stub flutter_tts Windows plugin into a minimal valid plugin that compiles and links
          $pluginCMake = "windows/flutter/ephemeral/.plugin_symlinks/flutter_tts/windows/CMakeLists.txt"
          $pluginDir = Split-Path $pluginCMake -Parent
          if (Test-Path $pluginCMake) {
            Write-Host "Stubbing $pluginCMake to a minimal valid plugin"
            # Write minimal CMakeLists that builds a DLL and exports the registrar symbol
            $cmakeLines = @(
              'cmake_minimum_required(VERSION 3.14)',
              'set(PLUGIN_NAME "flutter_tts_plugin")',
              'project(${PLUGIN_NAME} LANGUAGES CXX)',
              'add_library(${PLUGIN_NAME} SHARED',
              '  "flutter_tts_plugin.cpp"',
              ')',
              'apply_standard_settings(${PLUGIN_NAME})',
              'target_compile_features(${PLUGIN_NAME} PUBLIC cxx_std_17)',
              'target_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)',
              'target_include_directories(${PLUGIN_NAME} INTERFACE',
              '  "${CMAKE_CURRENT_SOURCE_DIR}/include"',
              ')',
              'target_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)',
              'set(flutter_tts_bundled_libraries "" PARENT_SCOPE)'
            )
            $cmakeLines | Set-Content $pluginCMake -Encoding UTF8

            # Ensure include directory exists and write header
            $includeDir = Join-Path $pluginDir 'include/flutter_tts'
            New-Item -ItemType Directory -Force $includeDir | Out-Null
            $headerPath = Join-Path $includeDir 'flutter_tts_plugin.h'
            $headerLines = @(
              '#ifndef FLUTTER_PLUGIN_FLUTTER_TTS_PLUGIN_H_',
              '#define FLUTTER_PLUGIN_FLUTTER_TTS_PLUGIN_H_',
              '#include <flutter/plugin_registrar_windows.h>',
              '#if defined(FLUTTER_PLUGIN_IMPL)',
              '#define FLUTTER_PLUGIN_EXPORT __declspec(dllexport)',
              '#else',
              '#define FLUTTER_PLUGIN_EXPORT __declspec(dllimport)',
              '#endif',
              'extern "C" {',
              'FLUTTER_PLUGIN_EXPORT void FlutterTtsPluginRegisterWithRegistrar(',
              '    FlutterDesktopPluginRegistrarRef registrar);',
              '}',
              '#endif  // FLUTTER_PLUGIN_FLUTTER_TTS_PLUGIN_H_'
            )
            $headerLines | Set-Content $headerPath -Encoding UTF8

            # Write minimal implementation
            $implPath = Join-Path $pluginDir 'flutter_tts_plugin.cpp'
            $implLines = @(
              '#include "include/flutter_tts/flutter_tts_plugin.h"',
              'extern "C" void FlutterTtsPluginRegisterWithRegistrar(FlutterDesktopPluginRegistrarRef registrar) {}'
            )
            $implLines | Set-Content $implPath -Encoding UTF8
          }

          Write-Host "Rebuilding with workaround applied..."
          flutter build windows --release
          
      - name: Package Windows Build
        shell: pwsh
        run: |
          Write-Host "Locating Windows build output folder..."
          $candidates = @(
            "build/windows/x64/runner/Release",
            "build/windows/runner/Release",
            "build/windows/x64/RelWithDebInfo",
            "build/windows/runner/RelWithDebInfo"
          )
          $bundle = $null
          foreach ($c in $candidates) {
            if (Test-Path $c) {
              $exeFile = Get-ChildItem -Path $c -Filter "*.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($exeFile) {
                $bundle = $c
                Write-Host "Found .exe file: $($exeFile.FullName)"
                break
              }
            }
          }
          if (-not $bundle) {
            Write-Host "Searching for .exe file in build/windows..."
            $exeFile = Get-ChildItem -Recurse -Path "build/windows" -Filter "*.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($exeFile) {
              $bundle = Split-Path $exeFile.FullName -Parent
              Write-Host "Found .exe file: $($exeFile.FullName)"
            }
          }
          if (-not $bundle) {
            Write-Host "Listing all files in build/windows:"
            Get-ChildItem -Recurse build/windows | Select-Object -First 200 | ForEach-Object { Write-Host $_.FullName }
            throw "Failed to locate Windows bundle folder with .exe file"
          }
          Write-Host "Bundling from: $bundle"

          # List all files in bundle directory
          Write-Host "Files in bundle directory:"
          Get-ChildItem -Path $bundle | ForEach-Object { Write-Host "  $($_.Name)" }

          # Ensure plugin DLLs are placed next to the exe so the loader can find them
          $searchRoots = @('build/windows/x64', 'build/windows')
          $pluginDlls = @()
          foreach ($root in $searchRoots) {
            if (Test-Path $root) {
              $pluginDlls += Get-ChildItem -Recurse -ErrorAction SilentlyContinue -Path $root -Filter '*_plugin.dll'
            }
          }
          foreach ($dll in $pluginDlls) {
            $dest = Join-Path $bundle $dll.Name
            if (-not (Test-Path $dest)) {
              Write-Host ("Copy plugin: {0} -> {1}" -f $dll.FullName, $dest)
              Copy-Item $dll.FullName $dest -Force
            }
          }

          # Verify critical files
          $exeCheck = Get-ChildItem -Path $bundle -Filter "*.exe" | Select-Object -First 1
          if (-not $exeCheck) { throw "ERROR: No .exe file found in bundle directory!" }
          Write-Host "Found .exe: $($exeCheck.Name)"

          if (-not (Test-Path (Join-Path $bundle 'data'))) { Write-Warning "'data' directory missing; the zip may be incomplete." }
          if (-not (Test-Path (Join-Path $bundle 'flutter_windows.dll'))) { Write-Warning "'flutter_windows.dll' missing; the zip may be incomplete." }

          Write-Host "Creating zip archive from: $bundle"
          Write-Host "Files to be zipped:"
          Get-ChildItem -Path $bundle -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }

          # Use correct syntax: Get all items in the bundle directory
          $bundlePath = Resolve-Path $bundle
          Compress-Archive -Path "$bundlePath\*" -DestinationPath kelivo-windows-x64.zip -Force

          if (-not (Test-Path kelivo-windows-x64.zip)) {
            throw "ERROR: Failed to create zip file!"
          }

          $size = (Get-Item kelivo-windows-x64.zip).Length / 1MB
          Write-Host ("Created kelivo-windows-x64.zip ({0:N1} MB)" -f $size)

          if ($size -lt 10) {
            Write-Warning "WARNING: Zip file is suspiciously small (< 10 MB). Build may be incomplete."
          }
          
      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: kelivo-windows-x64.zip
          
      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: kelivo-windows-x64.zip
